{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from '../../environments/environment';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/internal/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(http) {\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    createOrder(createOrder) {\n      let url = environment.host + '/api/orders/';\n      return this.http.post(url, createOrder, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"product list must not be empty\") {\n          return throwError(\"La List des produit doit contenir au moin 1 élément\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"quantity must be > 0\") {\n          return throwError(\"Les quantitées doivent être strictement positives\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"product name doesn't exist\") {\n          return throwError(\"Le nom du produit n'existe pas\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Quantity is short in the stock\") {\n          return throwError(\"quantité dans le stock n'est suffisante\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listOrders() {\n      let url = environment.host + '/api/orders';\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    deleteOrder(id) {\n      let url = environment.host + '/api/orders/' + id;\n      return this.http.delete(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Cannot delete order with status not in wait\") {\n          return throwError(\"La commande est déja en attente de ramassage\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    saveOrderDocument(document) {\n      let url = environment.host + '/api/order/documents';\n      return this.http.post(url, document, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"operation list is empty\") {\n          return throwError(\"La liste des opérations est vide\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"only on hold status is accepted\") {\n          return throwError(\"Status doit être en attente\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listOrderDocumentByStatus(url) {\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listOrderDocumentInWait() {\n      let url = environment.host + '/api/order/documents';\n      return this.listOrderDocumentByStatus(url);\n    }\n\n    listOrdersDetailsInDocumentInWait(id) {\n      let url = environment.host + '/api/order/documents/' + id;\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    moveFromInWaiteToInWaiteForPickup(id) {\n      let url = environment.host + '/api/order/documents/wait/' + id;\n      return this.http.post(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Status must be EN ATTENTE\") {\n          return throwError(\"Les status doit être en attente\");\n        }\n\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listOrderDocumentInWaitForPickUp() {\n      let url = environment.host + '/api/order/documents/wait/pickup';\n      return this.listOrderDocumentByStatus(url);\n    }\n\n    deleteOrderDocumentInWaitForPickUp(id) {\n      let url = environment.host + '/api/order/documents/wait/pickup/' + id;\n      return this.http.delete(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    moveFromWaiteToPickedup(id) {\n      let url = environment.host + '/api/order/documents/pickedup/' + id;\n      return this.http.post(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Status must be EN ATTENTE_RAMASSAGE\") {\n          return throwError(\"Les status doit être en attente de ramassage\");\n        }\n\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listOrderDocumentPickedUp() {\n      let url = environment.host + '/api/order/documents/pickedup';\n      return this.listOrderDocumentByStatus(url);\n    }\n\n    moveOrderToShipped(id) {\n      let url = environment.host + '/api/orders/shipped/' + id;\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Status must be RAMASSAGE\") {\n          return throwError(\"La status doit être en ramassage\");\n        }\n\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listOrdersByStatus(url) {\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listShippedOrders() {\n      let url = environment.host + '/api/orders/shipped';\n      return this.listOrdersByStatus(url);\n    }\n\n    putOrderToInDistribution(id) {\n      let url = environment.host + '/api/orders/inDistribution/' + id;\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Status must be EXPEDITE\") {\n          return throwError(\"La status doit être expédité \");\n        }\n\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listInDistributionOrders() {\n      let url = environment.host + '/api/orders/inDistribution';\n      return this.listOrdersByStatus(url);\n    }\n\n    listHistoryOrderDocument() {\n      let url = environment.host + '/api/order/documents/history';\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listCitiesWithOrderExpidite() {\n      let url = environment.host + '/api/orders/expedite/cities';\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listShippedOrdersByCity(city) {\n      let url = environment.host + '/api/orders/expidite/cities/' + city;\n      return this.listOrdersByStatus(url);\n    }\n\n    moveOrderToValidate(id) {\n      let url = environment.host + '/api/orders/validate/' + id;\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Status must be IN_DISTRIBUTION\") {\n          return throwError(\"La status doit être en IN_DISTRIBUTION\");\n        }\n\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    moveOrderToRefuse(id, orderRefuse) {\n      let url = environment.host + '/api/orders/refuse/' + id;\n      return this.http.post(url, orderRefuse, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Status must be IN_DISTRIBUTION\") {\n          return throwError(\"La status doit être en IN_DISTRIBUTION\");\n        }\n\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    moveOrderToAnnuler(id, orderRefuse) {\n      let url = environment.host + '/api/orders/cancel/' + id;\n      return this.http.post(url, orderRefuse, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Status must be IN_DISTRIBUTION\") {\n          return throwError(\"La status doit être en IN_DISTRIBUTION\");\n        }\n\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    listValidatedOrders() {\n      let url = environment.host + '/api/orders/validate';\n      return this.listOrdersByStatus(url);\n    }\n\n  }\n\n  OrderService.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  OrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrderService;\n})();","map":null,"metadata":{},"sourceType":"module"}