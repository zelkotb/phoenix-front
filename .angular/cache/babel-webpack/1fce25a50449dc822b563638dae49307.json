{"ast":null,"code":"import { SelectionModel } from '@angular/cdk/collections';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { SnackBarFailureComponent } from 'src/app/components/common/snack-bar-failure/snack-bar-failure.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/services/order.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nexport let OrderDocumentComponent = /*#__PURE__*/(() => {\n  class OrderDocumentComponent {\n    constructor(dialogRef, orderService, _snackBar) {\n      this.dialogRef = dialogRef;\n      this.orderService = orderService;\n      this._snackBar = _snackBar;\n      this.displayedColumns = ['id', 'name', 'phone', 'city', 'date'];\n      this.orders = [];\n    }\n\n    ngOnInit() {\n      this.orderService.listOrders().subscribe(result => {\n        this.orders = result.filter(r => r.status.toString() == \"EN_ATTENTE\");\n        this.dataSource = new MatTableDataSource(this.orders);\n        this.selection = new SelectionModel(true, []);\n      }, error => {\n        this.openSnackBarFailure(error);\n      });\n    }\n\n    openSnackBarFailure(message) {\n      this._snackBar.openFromComponent(SnackBarFailureComponent, {\n        data: message,\n        panelClass: 'app-snack-bar-failure',\n        duration: 5000\n      });\n    }\n    /** Whether the number of selected elements matches the total number of rows. */\n\n\n    isAllSelected() {\n      var _a, _b;\n\n      const numSelected = (_a = this.selection) === null || _a === void 0 ? void 0 : _a.selected.length;\n      const numRows = (_b = this.dataSource) === null || _b === void 0 ? void 0 : _b.data.length;\n      return numSelected === numRows;\n    }\n    /** Selects all rows if they are not all selected; otherwise clear selection. */\n\n\n    masterToggle() {\n      if (this.isAllSelected()) {\n        this.selection.clear();\n        return;\n      }\n\n      this.selection.select(...this.dataSource.data);\n    }\n    /** The label for the checkbox on the passed row */\n\n\n    checkboxLabel(row) {\n      if (!row) {\n        return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n      }\n\n      return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id + 1}`;\n    }\n\n  }\n\n  OrderDocumentComponent.ɵfac = function OrderDocumentComponent_Factory(t) {\n    return new (t || OrderDocumentComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.OrderService), i0.ɵɵdirectiveInject(i3.MatSnackBar));\n  };\n\n  OrderDocumentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OrderDocumentComponent,\n    selectors: [[\"app-order-document\"]],\n    decls: 2,\n    vars: 0,\n    template: function OrderDocumentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"order-document works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"]\n  });\n  return OrderDocumentComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}