{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from '../../environments/environment';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/internal/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    listProducts(category) {\n      let url = environment.host + '/api/products';\n\n      if (category) {\n        url = url + \"?category=\" + category;\n      }\n\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Category Name is incorrect\") {\n          return throwError(\"Le nom du category fourni n'existe pas\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    getProduct(id) {\n      let url = environment.host + '/api/products/' + id;\n      return this.http.get(url).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    createProduct(createProduct) {\n      let url = environment.host + '/api/products/';\n      return this.http.post(url, createProduct, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Category Name is incorrect\") {\n          return throwError(\"Le nom du category fourni n'existe pas\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"the quantity should be positive\") {\n          return throwError(\"La quantité doit être positive\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"product name should be unique\") {\n          return throwError(\"Le nom du produit doit être unique\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"product name should not contain ','\") {\n          return throwError(\"Le nom du produit ne doit pas contenir ','\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    updateProduct(updateProduct, id) {\n      let url = environment.host + '/api/products/' + id;\n      return this.http.put(url, updateProduct, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Category Name is incorrect\") {\n          return throwError(\"Le nom du category fourni n'existe pas\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"product name should be unique\") {\n          return throwError(\"Le nom du produit doit étre unique\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"product name should not contain ','\") {\n          return throwError(\"Le nom du produit ne doit pas contenir ','\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    updateQuantity(updateQuantity, id, type) {\n      let url;\n\n      if (type === \"local\") {\n        url = environment.host + '/api/products/quantity/' + id;\n      } else {\n        url = environment.host + '/api/products/quantity/phoenix/' + id;\n      }\n\n      return this.http.put(url, updateQuantity, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"the quantity should be positive\") {\n          return throwError(\"La quantité doit être positive\");\n        }\n\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"the quantity to be retourned needs to be less than the store\") {\n          return throwError(\"Quantité supérieur à celle du stock\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    deleteProduct(id) {\n      let url = environment.host + '/api/products/' + id;\n      return this.http.delete(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"You cannot delete a product with quantoty > 0\") {\n          return throwError(\"La quantité chez phoenix doit être 0\");\n        }\n\n        if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}