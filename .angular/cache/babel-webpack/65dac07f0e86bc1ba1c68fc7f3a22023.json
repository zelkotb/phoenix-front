{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Operation } from 'src/app/model/history';\nimport { UpdateQuantity } from 'src/app/model/product';\nimport { SnackBarFailureComponent } from '../../common/snack-bar-failure/snack-bar-failure.component';\nimport { SnackBarSuccessComponent } from '../../common/snack-bar-success/snack-bar-success.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"src/app/services/product.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/radio\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"@angular/material/progress-spinner\";\nimport * as i12 from \"../update-product/update-product.component\";\n\nfunction UpdateQuantityComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" champs requis \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UpdateQuantityComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" format de la quantit\\u00E9 est invalid \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction UpdateQuantityComponent_mat_radio_button_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-radio-button\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const operation_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", operation_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", operation_r4, \" \");\n  }\n}\n\nfunction UpdateQuantityComponent_mat_progress_spinner_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-spinner\", 16);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"mode\", ctx_r3.mode);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\n\nexport let UpdateQuantityComponent = /*#__PURE__*/(() => {\n  class UpdateQuantityComponent {\n    constructor(_snackBar, dialogRef, productService, data, datepipe) {\n      this._snackBar = _snackBar;\n      this.dialogRef = dialogRef;\n      this.productService = productService;\n      this.data = data;\n      this.datepipe = datepipe;\n      this.loading = false;\n      this.mode = \"\";\n      this.updateQuantity = new UpdateQuantity();\n      this.updateQuantityForm = new FormGroup({\n        quantity: new FormControl('', Validators.required),\n        operation: new FormControl('', Validators.required)\n      });\n      this.operations = [\"RETOURNER\", \"ALIMENTER\"];\n    }\n\n    ngOnInit() {}\n\n    get quantity() {\n      return this.updateQuantityForm.get('quantity');\n    }\n\n    get operation() {\n      return this.updateQuantityForm.get('operation');\n    }\n\n    onSubmit() {\n      this.mode = \"indeterminate\";\n      this.loading = true;\n      this.updateQuantity.quantity = this.quantity.value;\n      this.updateQuantity.date = this.datepipe.transform(new Date(), 'dd-MM-yyyy HH:mm').toString();\n\n      if (this.operation.value === \"RETOURNER\") {\n        this.updateQuantity.operation = Operation.RETOURNER;\n      } else {\n        this.updateQuantity.operation = Operation.ALIMENTER;\n      }\n\n      this.productService.updateQuantity(this.updateQuantity, this.data.id, this.data.type).subscribe(result => {\n        setTimeout(function () {\n          location.reload();\n        }, 1000);\n        this.openSnackBarSuccess(\"Quantité modifié avec succès\");\n      }, error => {\n        this.mode = \"\";\n        this.loading = false;\n        this.openSnackBarFailure(error);\n      });\n    }\n\n    openSnackBarFailure(message) {\n      this._snackBar.openFromComponent(SnackBarFailureComponent, {\n        data: message,\n        panelClass: 'app-snack-bar-failure',\n        duration: 5000\n      });\n    }\n\n    openSnackBarSuccess(message) {\n      this._snackBar.openFromComponent(SnackBarSuccessComponent, {\n        data: message,\n        panelClass: 'app-snack-bar-success',\n        duration: 5000\n      });\n    }\n\n  }\n\n  UpdateQuantityComponent.ɵfac = function UpdateQuantityComponent_Factory(t) {\n    return new (t || UpdateQuantityComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i3.ProductService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i4.DatePipe));\n  };\n\n  UpdateQuantityComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateQuantityComponent,\n    selectors: [[\"app-update-quantity\"]],\n    decls: 25,\n    vars: 11,\n    consts: [[1, \"update-product-container\"], [1, \"update-product-title\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"sub-form-inputs\"], [1, \"d-flex\", \"justify-content-center\"], [\"appearance\", \"outline\", 1, \"p-6\"], [\"maxlength\", \"50\", \"required\", \"\", \"formControlName\", \"quantity\", \"matInput\", \"\", \"placeholder\", \"Placeholder\", \"pattern\", \"^(0|[1-9][0-9]*)$\"], [\"matSuffix\", \"\", 3, \"ngStyle\"], [\"align\", \"end\"], [4, \"ngIf\"], [\"formControlName\", \"operation\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"spinner\"], [\"color\", \"primary\", \"type\", \"submit\", \"mat-raised-button\", \"\", 1, \"submit-button\", 3, \"disabled\"], [\"strokeWidth\", \"5\", \"diameter\", \"50\", 3, \"mode\", 4, \"ngIf\"], [3, \"value\"], [\"strokeWidth\", \"5\", \"diameter\", \"50\", 3, \"mode\"]],\n    template: function UpdateQuantityComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"h1\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function UpdateQuantityComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵelementStart(6, \"p\", 4);\n        i0.ɵɵelementStart(7, \"mat-form-field\", 5);\n        i0.ɵɵelementStart(8, \"mat-label\");\n        i0.ɵɵtext(9, \"Quantit\\u00E9\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 6);\n        i0.ɵɵelementStart(11, \"mat-icon\", 7);\n        i0.ɵɵtext(12, \"add_shopping_cart\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-hint\", 8);\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-hint\");\n        i0.ɵɵtext(16, \"* Quantit\\u00E9 dans votre depot\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, UpdateQuantityComponent_mat_error_17_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵtemplate(18, UpdateQuantityComponent_mat_error_18_Template, 2, 0, \"mat-error\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"mat-radio-group\", 10);\n        i0.ɵɵtemplate(20, UpdateQuantityComponent_mat_radio_button_20_Template, 2, 2, \"mat-radio-button\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 12);\n        i0.ɵɵelementStart(22, \"button\", 13);\n        i0.ɵɵtext(23, \"MODIFIER LE PRODUIT \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(24, UpdateQuantityComponent_mat_progress_spinner_24_Template, 1, 1, \"mat-progress-spinner\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Quantit\\u00E9 dans le stock : \", ctx.data.quantity, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.updateQuantityForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(9, _c0, ctx.quantity.invalid && (ctx.quantity.dirty || ctx.quantity.touched) ? \"red\" : \"black\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", (ctx.quantity.value == null ? null : ctx.quantity.value.length) || 0, \"/50\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.quantity.invalid && (ctx.quantity.dirty || ctx.quantity.touched) && ctx.quantity.errors.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.quantity.invalid && (ctx.quantity.dirty || ctx.quantity.touched) && ctx.quantity.errors.pattern);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.operations);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading || !ctx.updateQuantityForm.valid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    directives: [i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.MatFormField, i6.MatLabel, i5.DefaultValueAccessor, i7.MatInput, i5.MaxLengthValidator, i5.RequiredValidator, i5.NgControlStatus, i5.FormControlName, i5.PatternValidator, i8.MatIcon, i6.MatSuffix, i4.NgStyle, i6.MatHint, i4.NgIf, i9.MatRadioGroup, i4.NgForOf, i10.MatButton, i6.MatError, i9.MatRadioButton, i11.MatProgressSpinner],\n    styles: [\".update-product-title[_ngcontent-%COMP%]{display:flex;justify-content:center;margin-bottom:-50px}.sub-form-inputs[_ngcontent-%COMP%]{margin-top:50px}.spinner[_ngcontent-%COMP%]{display:flex;justify-content:center}mat-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:20px}.update-product-container[_ngcontent-%COMP%]{width:500px}button[_ngcontent-%COMP%]{width:100%}mat-radio-group[_ngcontent-%COMP%]{display:flex;justify-content:center}mat-radio-button[_ngcontent-%COMP%]{margin-left:40px;margin-bottom:20px}\"]\n  });\n  return UpdateQuantityComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}