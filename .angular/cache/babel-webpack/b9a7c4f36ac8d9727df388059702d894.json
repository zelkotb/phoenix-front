{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from '../../environments/environment';\nimport { catchError } from 'rxjs/internal/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RegisterService = /*#__PURE__*/(() => {\n  class RegisterService {\n    constructor(http) {\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    register(register, type) {\n      let url;\n\n      if (type === \"admin\") {\n        url = environment.host + '/api/account/register/office';\n      } else {\n        url = environment.host + '/api/account/register';\n      }\n\n      return this.http.post(url, register, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"email already exist\") {\n          return throwError(\"cette adresse mail est déja utilisée\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"phone already exist\") {\n          return throwError(\"ce numéro de téléphone est déja utilisé\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n  }\n\n  RegisterService.ɵfac = function RegisterService_Factory(t) {\n    return new (t || RegisterService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RegisterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RegisterService,\n    factory: RegisterService.ɵfac,\n    providedIn: 'root'\n  });\n  return RegisterService;\n})();","map":null,"metadata":{},"sourceType":"module"}