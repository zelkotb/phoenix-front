{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from '../../environments/environment';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/internal/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(http) {\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    accountList() {\n      let url = environment.host + '/api/account';\n      return this.http.get(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    deleteAccount(id) {\n      let url = environment.host + '/api/account/' + id;\n      return this.http.delete(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Account does not exist\") {\n          return throwError(\"Le compte que vous voulez supprimer n'existe pas\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"cannot delete admin or merchant\") {\n          return throwError(\"Vous ne pouvez pas supprimer ce compte\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    updateAccount(account, id) {\n      let url;\n      url = environment.host + '/api/account/' + id;\n      return this.http.put(url, account, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"email already exist\") {\n          return throwError(\"cette adresse mail est déja utilisée\");\n        } else if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"phone already exist\") {\n          return throwError(\"ce numéro de téléphone est déja utilisé\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    getAccount(id) {\n      let url;\n      url = environment.host + '/api/account/' + id;\n      return this.http.get(url).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    changePassword(changePasswordRequest, id) {\n      let url;\n      url = environment.host + '/api/account/' + id;\n      return this.http.post(url, changePasswordRequest, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Old Password Incorrect\") {\n          return throwError(\"Ancien mot de passe est incorrect\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    forgetPassword(forgetPasswordRequest) {\n      let url;\n      url = environment.host + '/api/account/forgetPassword';\n      return this.http.post(url, forgetPasswordRequest, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Account does not exist\") {\n          return throwError(\"L'adresse mail n'est pas correcte\");\n        }\n\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Account is blocked\") {\n          return throwError(\"Ce Compte est bloqué ou supprimé\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 503) {\n          return throwError(\"erreur lors l'envoie du mail\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    generatePassword(id) {\n      let url;\n      url = environment.host + '/api/account/forgetPassword/' + id;\n      return this.http.post(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Account does not exist\") {\n          return throwError(\"L'Id n'est pas correcte\");\n        }\n\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"You Cannot generate a password For Admin\") {\n          return throwError(\"Vous ne pouvez générer un mot de passe pour le compte admin\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 503) {\n          return throwError(\"erreur lors l'envoie du mail\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    deactivateAccountForAdmin(id) {\n      let url;\n      url = environment.host + '/api/account/deactivate/admin/' + id;\n      return this.http.post(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Account does not exist\") {\n          return throwError(\"L'Id n'est pas correcte\");\n        }\n\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"You Cannot deactivate this account\") {\n          return throwError(\"Vous ne pouvez desactiver un compte admin\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    activateAccountForAdmin(id) {\n      let url;\n      url = environment.host + '/api/account/activate/admin/' + id;\n      return this.http.post(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"Account does not exist\") {\n          return throwError(\"L'Id n'est pas correcte\");\n        }\n\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"You Cannot activate this account\") {\n          return throwError(\"Vous ne pouvez activer un compte admin\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    deactivateAccount(id) {\n      let url;\n      url = environment.host + '/api/account/deactivate/' + id;\n      return this.http.post(url, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 400 && err.error.responseMessage === \"You Cannot deactivate this account\") {\n          return throwError(\"Vous ne pouvez desactiver un compte admin\");\n        } else if (err.error.httpStatusCode == 400) {\n          return throwError(\"un paramètre incorrect\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}