{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { catchError } from 'rxjs/internal/operators';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(http) {\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    login(login) {\n      let url = environment.host + '/api/account/login';\n      return this.http.post(url, login, this.httpOptions).pipe(catchError(err => {\n        if (err.error.httpStatusCode == 403) {\n          return throwError(\"email ou mot de passe incorrect\");\n        } else if (err.error.httpStatusCode == 401 && err.error.responseMessage === \"User is blocked\") {\n          return throwError(\"Cet Utilisateur est bloqué ou supprimé\");\n        } else if (err.error.httpStatusCode == 500) {\n          return throwError(\"Erreur Interne\");\n        } else {\n          return throwError(\"Erreur Inconnue\");\n        }\n      }));\n    }\n\n    isLoggedIn() {\n      let token = localStorage.getItem('token');\n\n      if (token) {\n        return true;\n      }\n\n      return false;\n    }\n\n    getToken() {\n      return localStorage.getItem('token');\n    }\n\n    setToken(token, email, roles, id) {\n      localStorage.setItem('token', token);\n      localStorage.setItem('email', email);\n      localStorage.setItem('roles', roles);\n      localStorage.setItem('id', String(id));\n    }\n\n    updateToken(token, email) {\n      localStorage.setItem('token', token);\n      localStorage.setItem('email', email);\n    }\n\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('email');\n      localStorage.removeItem('roles');\n    }\n\n    getId() {\n      var id = localStorage.getItem('id');\n\n      if (id != undefined && id != null && id != \"\") {\n        return Number(id);\n      }\n    }\n\n    getDecodedAccessToken(token) {\n      try {\n        return jwt_decode(token);\n      } catch (Error) {\n        return null;\n      }\n    }\n\n    isAdmin() {\n      return this.isRole('ADMIN');\n    }\n\n    isMerchant() {\n      return this.isRole('E_MERCHANT');\n    }\n\n    isBackOffice() {\n      return this.isRole('BACK_OFFICE');\n    }\n\n    isRole(role) {\n      let tokenInfo = this.getDecodedAccessToken(this.getToken());\n\n      if (tokenInfo == undefined || tokenInfo == null) {\n        return false;\n      }\n\n      let roles = tokenInfo.roles;\n\n      if (roles.includes(role)) {\n        return true;\n      }\n\n      return false;\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}