{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/internal/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/login.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(loginService, router) {\n      this.loginService = loginService;\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      const token = this.loginService.getToken();\n\n      if (token) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n\n      return next.handle(request).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401 || err.status === 403) {\n            this.loginService.logout();\n            this.router.navigate(['/']);\n          }\n        }\n\n        return throwError(err);\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}