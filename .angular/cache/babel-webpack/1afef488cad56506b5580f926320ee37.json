{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ChangePasswordRequest } from 'src/app/model/account';\nimport { SnackBarSuccessComponent } from '../common/snack-bar-success/snack-bar-success.component';\nimport { SnackBarFailureComponent } from '../common/snack-bar-failure/snack-bar-failure.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/button\";\n\nfunction ChangePasswordComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" champs requis, min: 8, max: 20\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChangePasswordComponent_mat_error_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" champs requis, min: 8, max: 20\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChangePasswordComponent_mat_error_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" champs requis, min: 8, max: 20\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChangePasswordComponent_mat_error_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" le mot de passe n'est pas correct\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\n\nexport let ChangePasswordComponent = /*#__PURE__*/(() => {\n  class ChangePasswordComponent {\n    constructor(data, accountService, _snackBar, dialogRef) {\n      this.data = data;\n      this.accountService = accountService;\n      this._snackBar = _snackBar;\n      this.dialogRef = dialogRef;\n      this.hide = true;\n      this.hideOld = true;\n      this.hideRepeatPassword = true;\n      this.matcher = new MyErrorStateMatcher();\n      this.changePasswordRequest = new ChangePasswordRequest();\n      this.changePasswordForm = new FormGroup({\n        oldPassword: new FormControl('', Validators.required),\n        password: new FormControl('', Validators.required),\n        repeatPassword: new FormControl('', [Validators.required])\n      }, {\n        validators: group => {\n          let pass = group.get('password').value;\n          let confirmPass = group.get('repeatPassword').value;\n          return pass === confirmPass ? null : {\n            notSame: true\n          };\n        }\n      });\n    }\n\n    ngOnInit() {}\n\n    get password() {\n      return this.changePasswordForm.get('password');\n    }\n\n    get repeatPassword() {\n      return this.changePasswordForm.get('repeatPassword');\n    }\n\n    get oldPassword() {\n      return this.changePasswordForm.get('oldPassword');\n    }\n\n    isPasswordConfirmationValid() {\n      const password = this.password.value;\n      const confirmPassword = this.repeatPassword.value;\n      return password === confirmPassword ? true : false;\n    }\n\n    onSubmit() {\n      this.changePasswordRequest.oldPassword = this.oldPassword.value;\n      this.changePasswordRequest.newPassword = this.password.value;\n      this.accountService.changePassword(this.changePasswordRequest, this.data.id).subscribe(result => {\n        this.openSnackBarSuccess(\"Mot de passe modifié\");\n        this.dialogRef.close();\n      }, error => {\n        this.openSnackBarFailure(error);\n      });\n    }\n\n    openSnackBarSuccess(message) {\n      this._snackBar.openFromComponent(SnackBarSuccessComponent, {\n        data: message,\n        panelClass: 'app-snack-bar-success',\n        duration: 5000\n      });\n    }\n\n    openSnackBarFailure(message) {\n      this._snackBar.openFromComponent(SnackBarFailureComponent, {\n        data: message,\n        panelClass: 'app-snack-bar-failure',\n        duration: 5000\n      });\n    }\n\n  }\n\n  ChangePasswordComponent.ɵfac = function ChangePasswordComponent_Factory(t) {\n    return new (t || ChangePasswordComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i3.MatDialogRef));\n  };\n\n  ChangePasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChangePasswordComponent,\n    selectors: [[\"app-change-password\"]],\n    decls: 47,\n    vars: 25,\n    consts: [[1, \"change-password-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"change-password-title\"], [1, \"d-flex\", \"justify-content-center\"], [\"appearance\", \"outline\"], [\"required\", \"\", \"matInput\", \"\", \"minlength\", \"8\", \"maxlength\", \"20\", \"formControlName\", \"oldPassword\", \"placeholder\", \"Placeholder\", 3, \"type\"], [\"matSuffix\", \"\", 1, \"password_icon\", 3, \"ngStyle\", \"click\"], [\"align\", \"end\"], [4, \"ngIf\"], [\"required\", \"\", \"matInput\", \"\", \"minlength\", \"8\", \"maxlength\", \"20\", \"formControlName\", \"password\", \"placeholder\", \"Placeholder\", 3, \"type\"], [\"required\", \"\", \"matInput\", \"\", \"minlength\", \"8\", \"maxlength\", \"20\", \"formControlName\", \"repeatPassword\", \"placeholder\", \"Placeholder\", 3, \"errorStateMatcher\", \"type\"], [1, \"change-password-button\"], [\"color\", \"primary\", \"type\", \"submit\", \"mat-raised-button\", \"\", 3, \"disabled\"]],\n    template: function ChangePasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function ChangePasswordComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(2, \"mat-card-title\", 2);\n        i0.ɵɵtext(3, \"Veuillez remplir les champs suivants\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\", 3);\n        i0.ɵɵelementStart(5, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(6, \"mat-label\");\n        i0.ɵɵtext(7, \"Ancien Mot de Passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 5);\n        i0.ɵɵelementStart(9, \"mat-icon\", 6);\n        i0.ɵɵlistener(\"click\", function ChangePasswordComponent_Template_mat_icon_click_9_listener() {\n          return ctx.hideOld = !ctx.hide;\n        });\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-hint\");\n        i0.ɵɵtext(12, \"* ex : password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-hint\", 7);\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, ChangePasswordComponent_mat_error_15_Template, 2, 0, \"mat-error\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"p\", 3);\n        i0.ɵɵelementStart(17, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(18, \"mat-label\");\n        i0.ɵɵtext(19, \"Nouveau Mot de Passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"input\", 9);\n        i0.ɵɵelementStart(21, \"mat-icon\", 6);\n        i0.ɵɵlistener(\"click\", function ChangePasswordComponent_Template_mat_icon_click_21_listener() {\n          return ctx.hide = !ctx.hide;\n        });\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"mat-hint\");\n        i0.ɵɵtext(24, \"* ex : password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-hint\", 7);\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(27, ChangePasswordComponent_mat_error_27_Template, 2, 0, \"mat-error\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"p\", 3);\n        i0.ɵɵelementStart(29, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(30, \"mat-label\");\n        i0.ɵɵtext(31, \"Confirmer le Mot de Passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(32, \"input\", 10);\n        i0.ɵɵelementStart(33, \"mat-icon\", 6);\n        i0.ɵɵlistener(\"click\", function ChangePasswordComponent_Template_mat_icon_click_33_listener() {\n          return ctx.hideRepeatPassword = !ctx.hideRepeatPassword;\n        });\n        i0.ɵɵtext(34);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"mat-hint\");\n        i0.ɵɵtext(36, \"* ex : password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-hint\", 7);\n        i0.ɵɵtext(38);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(39, ChangePasswordComponent_mat_error_39_Template, 2, 0, \"mat-error\", 8);\n        i0.ɵɵtemplate(40, ChangePasswordComponent_mat_error_40_Template, 2, 0, \"mat-error\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"mat-card-actions\", 11);\n        i0.ɵɵelementStart(42, \"button\", 12);\n        i0.ɵɵtext(43, \"Modifier le mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"mat-card-footer\");\n        i0.ɵɵelementStart(45, \"mat-card-subtitle\");\n        i0.ɵɵtext(46, \"Toutes les champs avec \\\"*\\\" sont obligatoires\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.changePasswordForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"type\", ctx.hideOld ? \"password\" : \"text\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(19, _c0, ctx.oldPassword.invalid && (ctx.oldPassword.dirty || ctx.oldPassword.touched) ? \"red\" : \"black\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.hideOld ? \"visibility_off\" : \"visibility\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", (ctx.oldPassword.value == null ? null : ctx.oldPassword.value.length) || 0, \"/20\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.oldPassword.invalid && (ctx.oldPassword.dirty || ctx.oldPassword.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(21, _c0, ctx.password.invalid && (ctx.password.dirty || ctx.password.touched) ? \"red\" : \"black\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.hide ? \"visibility_off\" : \"visibility\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", (ctx.password.value == null ? null : ctx.password.value.length) || 0, \"/20\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.password.invalid && (ctx.password.dirty || ctx.password.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"errorStateMatcher\", ctx.matcher)(\"type\", ctx.hideRepeatPassword ? \"password\" : \"text\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(23, _c0, ctx.repeatPassword.invalid && (ctx.repeatPassword.dirty || ctx.repeatPassword.touched) ? \"red\" : \"black\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.hideRepeatPassword ? \"visibility_off\" : \"visibility\", \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", (ctx.repeatPassword.value == null ? null : ctx.repeatPassword.value.length) || 0, \"/20\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.repeatPassword.invalid && (ctx.repeatPassword.dirty || ctx.repeatPassword.touched) && ctx.repeatPassword.errors.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.repeatPassword.dirty || ctx.repeatPassword.touched) && !ctx.isPasswordConfirmationValid() && !(ctx.repeatPassword.errors == null ? null : ctx.repeatPassword.errors.required));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.changePasswordForm.valid);\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.MatCardTitle, i6.MatFormField, i6.MatLabel, i7.MatInput, i4.DefaultValueAccessor, i4.RequiredValidator, i4.MinLengthValidator, i4.MaxLengthValidator, i4.NgControlStatus, i4.FormControlName, i8.MatIcon, i6.MatSuffix, i9.NgStyle, i6.MatHint, i9.NgIf, i5.MatCardActions, i10.MatButton, i5.MatCardFooter, i5.MatCardSubtitle, i6.MatError],\n    styles: [\".password_icon[_ngcontent-%COMP%]:hover{cursor:pointer}.change-password-container[_ngcontent-%COMP%]{display:flex;justify-content:center;width:400px}mat-form-field[_ngcontent-%COMP%]{width:100%}.change-password-title[_ngcontent-%COMP%]{display:flex;justify-content:center;margin-bottom:20px}button[_ngcontent-%COMP%]{width:100%}\"]\n  });\n  return ChangePasswordComponent;\n})();\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    const password = form.form.get('password').value;\n    const confirmPassword = form.form.get('repeatPassword').value;\n    return !!(password != confirmPassword && (control.dirty || control.touched) || control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}